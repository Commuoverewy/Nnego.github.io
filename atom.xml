<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nnego.github.io</id>
    <title>苏小霂的博客</title>
    <updated>2020-06-21T08:39:26.078Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nnego.github.io"/>
    <link rel="self" href="https://nnego.github.io/atom.xml"/>
    <subtitle>做自己想做的事，成为自己想成为的人，永远都不会太迟。</subtitle>
    <logo>https://nnego.github.io/images/avatar.png</logo>
    <icon>https://nnego.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 苏小霂的博客</rights>
    <entry>
        <title type="html"><![CDATA[关于本站]]></title>
        <id>https://nnego.github.io/about-this-site/</id>
        <link href="https://nnego.github.io/about-this-site/">
        </link>
        <updated>2020-06-20T14:54:17.000Z</updated>
        <summary type="html"><![CDATA[<p>👆前言，勉强算是近况总结吧，说一说建站初旨，聊聊近况，和一些其他无关紧要的事</p>
]]></summary>
        <content type="html"><![CDATA[<p>👆前言，勉强算是近况总结吧，说一说建站初旨，聊聊近况，和一些其他无关紧要的事</p>
<!-- more -->
<h4 id="近期经历">近期经历</h4>
<p>2020年注定是不平凡的一年，而我恰恰在这一年毕业。网上也有话题讨论“2020届最惨毕业生”，是不是最惨我不知道，但我挺惨的，但应该不是最惨的。今年最大的事情就是考研失败吧，考完之后觉得自己数学做的一塌糊涂，但没想到还是给击穿了下限，总的来说就是感觉不怎么好，成绩出来后竟然这么差。虽说有心理准备，这件事还是让我难过了好久……颓了几天之后打起精神来，准备春招，经历了大概一个多月，大大小小的笔试面试后，最后拿到了一个游戏公司的offer就没再投简历了。此时我的毕业设计还未动身，4月中旬的时候才正式开始做，5月初开学，在学校紧赶慢赶完成了程序，写完论文，最后通过了毕业答辩，总之一切还算顺利。相比其他学校的云毕业，我们还算幸运，能够赶回学校见一见老师同学，能跟朋友们再开开黑，一起欢笑，一起拍毕业照，为自己匆忙的大学生活添上一个完整的休止符。在离别前的几天我开始写这篇文章，想赶在分别前写点什么……</p>
<h4 id="为什么想选择静态博客">为什么想选择静态博客</h4>
<p>搭建个人博客的来由是大三买了个人用的服务器，想在服务器上从前端到后台实现一套完整的网站搭建过程，由于时间原因和课程太紧，一直没时间弄，反而把大量的时间花费在一些无用的东西上。<br>
后来我想了想，搭建博客最终还是为了写作，这样一套系统搞下来反而让我的精力全部花费在了其他东西上。记录下思维迸发的瞬间和解决每一个技术问题的过程，才是内容创作的核心所在。于是我开始选择了静态博客，静态博客只需要写内容，内容渲染，界面什么的交给框架就行了，搭建在github上的网站也只需要买个域名解析一下github pages就好了，然后就选择了Hexo。<br>
用了一段时间Hexo，中间因为考研隔了好久没写，今年春招的时候重试算法和数据结构，记录了一下用得到的东西，趁着疫情在家写了几篇。<br>
之后便是开学，这两个月以来主要是做毕设，写论文，答辩，忙着毕业的事情。把所有的毕设相关的文档代码整理完之后就重装了系统。Hexo的博文是本地写作，本地部署的，我把系统从win10换到了Deepin Linux，Hexo的那一套东西自然不能正常使用了，偶然间在Deepin商店看到了Gridea，就尝试着换着使用了一下，便有了这个网站和这篇文章。</p>
<h4 id="关于以后">关于以后</h4>
<p>由于重装系统时没有抹掉D盘，所以之前Hexo的那些markdown文件还在，以后找时间会慢慢转移到本站来。<br>
当然以后也会写一些新的内容，从毕业进入社会，前方的路依旧漫长，希望自己业余的时候可以多阅读多写作，记录一些人生感悟和经历，漫漫人生路，有缘再见！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python3实现RSA签名验证]]></title>
        <id>https://nnego.github.io/GTh6T4hqk/</id>
        <link href="https://nnego.github.io/GTh6T4hqk/">
        </link>
        <updated>2019-04-16T08:20:15.000Z</updated>
        <summary type="html"><![CDATA[<h5 id="前言">前言</h5>
<p>最近学习信息安全概论，讲到了RSA算法，这种基于公钥和私钥的非对称加密算法在实际生活中应用比较广泛，正好利用python丰富的第三方库来实现一下基于RSA的数字签名及其验证。</p>
]]></summary>
        <content type="html"><![CDATA[<h5 id="前言">前言</h5>
<p>最近学习信息安全概论，讲到了RSA算法，这种基于公钥和私钥的非对称加密算法在实际生活中应用比较广泛，正好利用python丰富的第三方库来实现一下基于RSA的数字签名及其验证。</p>
<!-- more -->
<h5 id="基本原理">基本原理</h5>
<figure data-type="image" tabindex="1"><img src="http://ww1.sinaimg.cn/mw690/d7be7852ly1g24k9mhazlj212m0od0uq.jpg" alt="RSA原理" loading="lazy"></figure>
<p>RSA算法的基本原理：<a href="https://zh.wikipedia.org/zh-hans/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA加密演算法- 维基百科</a></p>
<p><a href="http://www.baidu.com/link?url=2qv3c1qL_ImRS-ez42_Ph-4rGo61a36T3xImkFkXYOogRlmNQ5xc2EsNZTI2Jq8lhaFe5X2kzSRk1xl9QSaLQkFT4kKgQX2FQIYDnllKouK&amp;wd=&amp;eqid=dbc5a4780001354e000000025cb5903e"><em>RSA</em> - 原理、特点(加解密及签名验签)及公钥和私钥的生成 </a></p>
<h5 id="主要用到的库">主要用到的库</h5>
<ul>
<li>
<p>Crypto：用于加解密和提供哈希函数的第三方库 <a href="https://pycryptodome.readthedocs.io/en/latest/src/cipher/cipher.html">官方文档</a></p>
</li>
<li>
<p>Tkinter：python3自带的图形化界面(GUI)模块</p>
</li>
</ul>
<h5 id="运行环境">运行环境</h5>
<ul>
<li>
<p>win10 64位</p>
</li>
<li>
<p>python 3.6</p>
</li>
</ul>
<h5 id="具体实现">具体实现</h5>
<pre><code class="language-python">from Crypto.PublicKey import RSA
from Crypto import Random
from Crypto.Hash import SHA
from Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5
from Crypto.Signature import PKCS1_v1_5 as Signature_pkcs1_v1_5
import base64

import tkinter as tk
import tkinter.messagebox as messagebox
window = tk.Tk()
window.title('RSA signature')
window.geometry('400x200')

# 伪随机数生成器
random_generator = Random.new().read
# 生成RSA实例
rsa = RSA.generate(1024, random_generator)

rsa_path = 'rsa.key'
pub_rsa_path = 'rsa.pub'
message_path = 'plain.txt'

#生成私钥
def genPrivkeys():
    private_pem = rsa.exportKey()
    with open(rsa_path, 'wb') as f:
        f.write(private_pem)
    return private_pem

#生成公钥
def genPubKeys():
    public_pem = rsa.publickey().exportKey()
    with open(pub_rsa_path, 'wb') as f:
        f.write(public_pem)
    return public_pem

#点击生成密钥按钮的响应函数
def generateCallback():
    privkey=genPrivkeys()
    pubkey=genPubKeys()
    messagebox.showinfo('hint', '生成成功! 公钥存放为rsa.pub,私钥存放为rsa.pub\n公钥为: \n'+str(pubkey)+'\n'+'私钥为: \n'+str(privkey))

# 生成摘要，使用SHA1哈希函数
def genDigest(message_path):
    with open(message_path,'r') as f:
        message = f.read()
    digest = SHA.new()
    digest.update(message.encode())
    with open('digest.txt','w') as f:
        f.write(digest.hexdigest())
    return digest.hexdigest()#生成摘要

#点击生成摘要按钮的响应函数
def genDigestCallback():
    digestResult = genDigest(message_path)
    messagebox.showinfo('生成摘要','摘要生成成功! 已存至digest.txt  hex摘要为\n'+digestResult)

#利用私钥签名，rsa_path为私钥存储路径
def signature(message_path,priv_path):
    with open(priv_path) as f:
        key = f.read()
    rsakey = RSA.importKey(key)
    signer = Signature_pkcs1_v1_5.new(rsakey)
    with open(message_path) as f:
        message = f.read()
    digest = SHA.new()
    digest.update(message.encode())
    sign = signer.sign(digest)
    signature = base64.b64encode(sign)
    with open('sign.txt','wb') as f:
        f.write(signature)
    return signature

#点击RSA签名按钮的响应函数
def signCallback():
    signResult=signature(message_path,rsa_path)#用私钥签名
    messagebox.showinfo('摘要加密','签名成功! \n加密后的签名为\n'+str(signResult))

# 验证签名
def verify_signature(message_path,signature,pub_rsa_path):
    with open(pub_rsa_path) as f:
        key = f.read()
    rsakey = RSA.importKey(key)
    verifier = Signature_pkcs1_v1_5.new(rsakey)

    with open(message_path) as f:
        message = f.read()
    digest = SHA.new()
    digest.update(message.encode())

    is_verify = verifier.verify(digest,base64.b64decode(signature))

    return is_verify

def verifyCallback():
    signResult = signature(message_path, rsa_path)
    verifiResult = verify_signature(message_path,signResult,pub_rsa_path)#利用公钥验证
    if(verifiResult == True):
        messagebox.showinfo('签名验证', '验证成功')
    else:
        messagebox.showinfo('签名验证', '验证失败')

# if __name__ == &quot;__main__&quot;:
#     with open('plain.txt','r') as f:
#         message = f.read()
#     digest = SHA.new()
#     digest.update(message.encode())
#     print(digest.hexdigest())#生成摘要

b1 = tk.Button(window,
              text='生成密钥',
              height=2,width=15,
              command=generateCallback)
b1.pack()

b2 = tk.Button(window,
               text='生成摘要',
               height=2,width=15,
               command=genDigestCallback)
b2.pack()

b3 = tk.Button(window,
               text='RSA签名',
               height=2,width=15,
               command=signCallback)
b3.pack()

b4 = tk.Button(window,
               text='验证签名',
               height=2,width=15,
               command=verifyCallback)
b4.pack()
window.mainloop()
</code></pre>
<h5 id="运行结果">运行结果</h5>
<figure data-type="image" tabindex="2"><img src="http://ww1.sinaimg.cn/large/d7be7852ly1g25j18h2zmg20jh0k6hdt.gif" alt="运行结果" loading="lazy"></figure>
<p>运行后的工程目录：</p>
<figure data-type="image" tabindex="3"><img src="http://ww1.sinaimg.cn/mw690/d7be7852ly1g24kh36r6nj207f06w3yi.jpg" alt="工程目录" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://nnego.github.io/dqoJZQMp5/</id>
        <link href="https://nnego.github.io/dqoJZQMp5/">
        </link>
        <updated>2019-02-21T02:58:13.000Z</updated>
        <summary type="html"><![CDATA[<p>入门~~~</p>
<p>少许markdown语法和hexo常用命令 |=_=|</p>
]]></summary>
        <content type="html"><![CDATA[<p>入门~~~</p>
<p>少许markdown语法和hexo常用命令 |=_=|</p>
<!-- more -->
<h2 id="常常想不起来的markdown语法">常常想不起来的Markdown语法</h2>
<h3 id="字体居中">字体居中</h3>
<pre><code class="language-html">&lt;center&gt;测试文字&lt;/center&gt;
</code></pre>
<ul>
<li>测试效果：</li>
</ul>
<center>测试文字</center>
<hr>
<h3 id="斜体">斜体</h3>
<pre><code>*斜体文本* 或 _斜体文本_   //注意两个*号与文字之间不要有空格
</code></pre>
<ul>
<li>
<p>效果：</p>
<p><em>斜体文本</em>  或者 <em>斜体文本</em></p>
</li>
</ul>
<hr>
<h3 id="粗体">粗体</h3>
<pre><code>**加粗文本** 或 __加粗文本__
</code></pre>
<ul>
<li>
<p>测试结果</p>
<p><strong>加粗文本</strong> 或者 <strong>加粗文本</strong></p>
</li>
</ul>
<hr>
<h3 id="删除线">删除线</h3>
<pre><code>~~删除文本~~
</code></pre>
<ul>
<li>
<p>效果</p>
<p><s>删除文本</s></p>
</li>
</ul>
<hr>
<h3 id="下划线">下划线</h3>
<pre><code>&lt;u&gt;下划线文本&lt;/u&gt;
</code></pre>
<ul>
<li>
<p>测试文本</p>
<p><u>下划线文本</u></p>
</li>
</ul>
<h3 id="引用">引用</h3>
<pre><code>&gt; 测试文字 // 有无空格皆可
</code></pre>
<ul>
<li>测试效果：</li>
</ul>
<blockquote>
<p>测试文字(无空格)</p>
</blockquote>
<blockquote>
<p>测试文字(有空格)</p>
</blockquote>
<blockquote>
<p>节选自</p>
<blockquote>
<p>《节选自</p>
<blockquote>
<p>&lt;节选&gt;</p>
</blockquote>
<p>》</p>
</blockquote>
</blockquote>
<h3 id="代码块">代码块</h3>
<pre><code>​```
 //测试文字
​```

代码上下分别用三个反引号包起来，且反引号各占一行
</code></pre>
<ul>
<li>
<p>测试效果</p>
<pre><code class="language-c">#include&lt;iostream&gt;
using namespace std;
int main()
{
    return 0;
}
</code></pre>
</li>
</ul>
<h3 id="分割线">分割线</h3>
<pre><code>三个或四个以上的 - 或者 * 均可

1 | ---
2 | ***
3 | ----
4 | ****
</code></pre>
<ul>
<li>
<p>测试效果</p>
<hr>
<hr>
<hr>
<hr>
</li>
</ul>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://nnego.github.io/hello-gridea/</id>
        <link href="https://nnego.github.io/hello-gridea/">
        </link>
        <updated>2019-02-20T12:31:51.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>